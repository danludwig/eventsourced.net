@{
  ViewData["Title"] = "Register";
}

<h2>@ViewData["Title"].</h2>

<form id="register_form" action="/api/register" method="post" class="form-horizontal" role="form">
  <h4>Create a new account.</h4>
  <hr />
  <div class="form-group">
    <div class="col-md-10">
      <label class="control-label sr-only">Email address or phone number</label>
      <input type="text" name="emailOrPhone" class="form-control" placeholder="Email address or phone number" />
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-10">
      <button type="submit" class="btn btn-default">Register</button>
    </div>
  </div>
  <div class="text-danger form-errors">
    <ul></ul>
  </div>
</form>

@section Scripts {
  @*
    NOTE: this is a terrible way to do client script.
    TODO: replace cshtml & viewcontrollers with redux/react spa.
  *@
  @* ReSharper disable FunctionsUsedBeforeDeclared *@
  <script>
    $(document).on('ready', function() {
      $('#register_form').find('[name=emailOrPhone]').focus();
      $('#register_form').on('submit', function() {
        var $form = $(this), data = {};
        $form.serializeArray().map(function(x) { data[x.name] = x.value; });
        $form.find('input, button').attr('disabled', 'disabled');
        clearValidationErrors();
        $.ajax({
            type: 'POST',
            url: $form.attr('action'),
            data: data
          })
          .done(function(data, status, xhr) {
            console.log('POST ' + $form.attr('action') + ' response received.');
            var location = xhr.getResponseHeader('location');
            var correlationUrl = xhr.getResponseHeader("x-correlation-socket");
            var socket = new WebSocket(correlationUrl);
            socket.onopen = function(e) {
              console.log('WebSockets: Correlation ' + e.type);
            }
            socket.onmessage = function(message) {
              console.log('WebSockets: ' + message.data);
              var data = { type: 'unknown' };
              try {
                data = $.parseJSON(message.data);
              } catch (ex) {
                console.log('Message was expected to be json.');
              }
              switch (data.type) {
              case 'ContactEmailChallengePrepared':
              case 'ContactSmsChallengePrepared':
                window.location = location;
                break;
              default:
                console.log('Encountered unexpected data type "' + data.type + '"');
              }
            }
          })
          .fail(function(xhr) {
            $form.find('input, button').removeAttr('disabled');
            console.log('POST ' + $form.attr('action') + ' failed.');
            if (xhr.status === 400 && xhr.responseJSON) {
              var modelState = xhr.responseJSON;
              for (var fieldName in modelState) {
                if (!modelState.hasOwnProperty(fieldName)) continue;
                var fieldErrors = modelState[fieldName];
                if (!fieldErrors.length) continue;
                for (var i = 0; i < fieldErrors.length; i++) {
                  var message = getValidationMessage(fieldErrors[i]);
                  addValidationError(message);
                }
              }
            }
          });
        return false;
      });

      function camelizeHack(text) {
        return text.substr(0, 1).toLowerCase() + text.substr(1);
      }

      function getValidationMessage(item) {
        var messages = window["validationMessages"];
        if (messages[item.key] && messages[item.key][camelizeHack(item.reason)]) {
          var message = messages[item.key][camelizeHack(item.reason)] || item.message;
          message = message.replace('{attemptedValue}', item.value);
          return message;
        }
        return item.message || 'An unexpected error occurred.';
      }

      function addValidationError(message) {
        var $ul = $('#register_form .form-errors ul');
        $ul.append($('<li></li>').text(message));
      }

      function clearValidationErrors() {
        var $ul = $('#register_form .form-errors ul');
        $ul.empty();
      }

      window['validationMessages'] = {
        emailOrPhone: {
          empty: 'Email address or phone number is required.',
          invalidFormat: '"{attemptedValue}" does not appear to be a valid email address or US phone number.'
        }
      }
    });
  </script>
  @* ReSharper restore FunctionsUsedBeforeDeclared *@
}