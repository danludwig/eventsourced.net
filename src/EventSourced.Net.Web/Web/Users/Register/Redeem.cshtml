@using EventSourced.Net
@model EventSourced.Net.Web.Users.Register.RedeemViewModel
@{
  ViewData["Title"] = "Create login";
}

<h2>@ViewData["Title"].</h2>

<form id="redeem_form" action="/api/register/@Model.CorrelationId/redeem" method="post" class="form-horizontal" role="form">
  <h4>Choose a username and password.</h4>
  <hr />
  <div class="form-group has-success">
    <div class="col-md-6">
      @if (Model.Purpose == ContactChallengePurpose.CreateUserFromEmail) {
        <label class="control-label sr-only">Email address:</label>
        <input type="email" name="emailOrPhone" class="form-control" value="@Model.ContactValue" disabled="disabled" />
        <p class="help-block">You will be able to login using your email address above.</p>

      } else if (Model.Purpose == ContactChallengePurpose.CreateUserFromPhone) {
        <label class="control-label sr-only">Phone number:</label>
        <input type="tel" name="emailOrPhone" class="form-control" value="@Model.PhoneNumberFormatted" disabled="disabled" />
        <p class="help-block">You will be able to login using your phone number above.</p>
      }
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-6">
      <label class="control-label sr-only">Username</label>
      <div class="input-group">
        <input type="text" name="username" class="form-control" placeholder="Choose a username" />
        <span class="input-group-btn input-group-btn-right" style="left: 1px;">
          <button id="check_username" type="button" class="btn btn-default" data-click-action="@Url.RouteUrl("CheckUsernameRoute")">
            Check availability
            <span class="glyphicon glyphicon-search text-info" aria-hidden="true"></span>
            <span class="glyphicon glyphicon-remove text-danger" aria-hidden="true" style="display: none"></span>
            <span class="glyphicon glyphicon-ok text-success" aria-hidden="true" style="display: none;"></span>
          </button>
        </span>
      </div>
    </div>
    <div class="col-md-12">
      <p class="help-block help-info default">Use between 2 and 12 numbers, letters, hypens, underscores, and dots.</p>
      <p class="help-block help-info checking-availability" style="display: none;">Checking availability...</p>
      <p id="check_username_message" class="help-block help-result" style="display: none;"></p>
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-6">
      <label class="control-label sr-only">Password</label>
      <input type="password" name="password" class="form-control" placeholder="Create a password" />
      <p class="help-block">Must be at least 8 characters long.</p>
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-6">
      <label class="control-label sr-only">Confirm Password</label>
      <input type="password" name="passwordConfirmation" class="form-control" placeholder="Enter same password as above" />
      <p class="help-block">Make double sure you typed it correctly.</p>
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-10">
      <input type="hidden" name="token" value="@Model.Token" />
      <button type="submit" class="btn btn-default">Create login</button>
    </div>
  </div>
  <div class="text-danger form-errors">
    <ul></ul>
  </div>
</form>

@section Scripts {
  @*
    NOTE: this is a terrible way to do client script.
    TODO: replace cshtml & viewcontrollers with redux/react spa.
  *@
  @* ReSharper disable FunctionsUsedBeforeDeclared *@
  <script src="/js/redeem.js"></script>
  @* ReSharper restore FunctionsUsedBeforeDeclared *@
}
