@model EventSourced.Net.Web.Users.Register.RedeemViewModel
@{
  ViewData["Title"] = "Create a password";
}

<h2>@ViewData["Title"].</h2>

<form id="redeem_form" action="/api/register/@Model.CorrelationId/redeem" method="post" class="form-horizontal" role="form">
  <h4><strong>@Model.ContactValue</strong> will be your login</h4>
  <hr />
  <div class="form-group">
    <div class="col-md-10">
      <label class="control-label sr-only">Password</label>
      <input type="password" name="password" class="form-control" placeholder="Create a password" />
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-10">
      <label class="control-label sr-only">Confirm Password</label>
      <input type="password" name="passwordConfirmation" class="form-control" placeholder="Enter same password as above" />
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-10">
      <input type="hidden" name="token" value="@Model.Token" />
      <button type="submit" class="btn btn-default">Create Password</button>
    </div>
  </div>
  <div class="text-danger form-errors">
    <ul></ul>
  </div>
</form>

@section Scripts {
  @*
    NOTE: this is a terrible way to do client script.
    TODO: replace cshtml & viewcontrollers with redux/react spa.
  *@
  @* ReSharper disable FunctionsUsedBeforeDeclared *@
  <script>
    $(document).on('ready', function () {
      var formId = 'redeem_form', password = 'password';
      setFocus(formId, password);
      $('#' + formId).on('submit', function () {
        var $form = $(this), data = serializeFormData($form);
        clearValidationErrors($form);
        disableForm($form);
        $.ajax({
          type: 'POST',
          url: $form.attr('action'),
          data: data
        })
          .done(function (response, status, xhr) {
            setLocation(xhr);
          })
          .fail(function (xhr) {
            enableForm($form);
            handleValidationErrors(xhr, $form);
          });
        return false;
      });

      window['validationMessages'] = {
        password: {
          empty: 'Password is required.',
          notEqual: 'Passwords do not match.',
          invalidFormat: 'Password must contain at least {minCharacters} characters.'
        },
        passwordConfirmation: {
          empty: 'Password confirmation is required.'
        },
        token: {
          stateConflict: 'Your password has already been created. Please use the forward button on your browser and do not navigate back to this page.',
          unverified: 'Your opportunity to complete registration has expired. Please restart the registration process.'
        },
        correlationId: {
          stateConflict: 'Something went wrong. Please restart the registration process.'
        }
      }
    });
  </script>
  @* ReSharper restore FunctionsUsedBeforeDeclared *@
}