@model EventSourced.Net.Web.Users.Register.RedeemViewModel
@{
  ViewData["Title"] = "Create a Password";
}

<h2>@ViewData["Title"].</h2>

<form id="redeem_form" action="/api/register/@Model.CorrelationId/redeem" method="post" class="form-horizontal" role="form">
  <h4><strong>@Model.ContactValue</strong> will be your login</h4>
  <hr />
  <div class="form-group">
    <div class="col-md-10">
      <label class="control-label sr-only">Password</label>
      <input type="password" name="password" class="form-control" placeholder="Create a password" />
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-10">
      <label class="control-label sr-only">Confirm Password</label>
      <input type="password" name="passwordConfirmation" class="form-control" placeholder="Enter same password as above" />
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-10">
      <input type="hidden" name="token" value="@Model.Token"/>
      <button type="submit" class="btn btn-default">Create Password</button>
    </div>
  </div>
</form>

@section Scripts {
  @*
    NOTE: this is a terrible way to do client script.
    TODO: replace cshtml & viewcontrollers with redux/react spa.
  *@
  <script>
    $(document).on('ready', function () {
      $('#redeem_form').find('[name=password]').focus();
      $('#redeem_form').on('submit', function () {
        var $form = $(this), data = {};
        $form.serializeArray().map(function (x) { data[x.name] = x.value; });
        $.ajax({
          type: 'POST',
          url: $form.attr('action'),
          data: data
        })
          .done(function (data, status, xhr) {
            console.log('POST ' + $form.attr('action') + ' response received.');
            //var location = xhr.getResponseHeader('location');
            //window.location = location;
          })
          .fail(function () {
            console.log('POST ' + $form.attr('action') + ' failed.');
          });
        return false;
      });
    });
  </script>
}