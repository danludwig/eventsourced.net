@using EventSourced.Net
@model EventSourced.Net.Web.Users.Register.RedeemViewModel
@{
  ViewData["Title"] = "Create login";
}

<h2>@ViewData["Title"].</h2>

<form id="redeem_form" action="/api/register/@Model.CorrelationId/redeem" method="post" class="form-horizontal" role="form">
  <h4>Choose a username and password.</h4>
  <hr />
  <div class="form-group has-success">
    <div class="col-md-6">
      @if (Model.Purpose == ContactChallengePurpose.CreateUserFromEmail) {
        <label class="control-label sr-only">Email address:</label>
        <input type="email" name="emailOrPhone" class="form-control" value="@Model.ContactValue" disabled="disabled" />
        <p class="help-block">You will be able to login using your email address above.</p>

      } else if (Model.Purpose == ContactChallengePurpose.CreateUserFromPhone) {
        <label class="control-label sr-only">Phone number:</label>
        <input type="tel" name="emailOrPhone" class="form-control" value="@Model.PhoneNumberFormatted" disabled="disabled" />
        <p class="help-block">You will be able to login using your phone number above.</p>
      }
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-6">
      <label class="control-label sr-only">Username</label>
      <div class="input-group">
        <input type="text" name="username" class="form-control" placeholder="Choose a username" />
        <span class="input-group-btn input-group-btn-right" style="left: 1px;">
          <button id="check_username" type="button" class="btn btn-default" data-click-action="@Url.RouteUrl("CheckUsernameRoute")">
            Check availability
            <span class="glyphicon glyphicon-search text-info" aria-hidden="true"></span>
            <span class="glyphicon glyphicon-remove text-danger" aria-hidden="true" style="display: none"></span>
            <span class="glyphicon glyphicon-ok text-success" aria-hidden="true" style="display: none;"></span>
          </button>
        </span>
      </div>
    </div>
    <div class="col-md-12">
      <p class="help-block help-info default">Use between 2 and 12 numbers, letters, hypens, underscores, and dots.</p>
      <p class="help-block help-info checking-availability" style="display: none;">Checking availability...</p>
      <p id="check_username_message" class="help-block help-result" style="display: none;"></p>
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-6">
      <label class="control-label sr-only">Password</label>
      <input type="password" name="password" class="form-control" placeholder="Create a password" />
      <p class="help-block">Must be at least 8 characters long.</p>
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-6">
      <label class="control-label sr-only">Confirm Password</label>
      <input type="password" name="passwordConfirmation" class="form-control" placeholder="Enter same password as above" />
      <p class="help-block">Make double sure you typed it correctly.</p>
    </div>
  </div>
  <div class="form-group">
    <div class="col-md-10">
      <input type="hidden" name="token" value="@Model.Token" />
      <button type="submit" class="btn btn-default">Create login</button>
    </div>
  </div>
  <div class="text-danger form-errors">
    <ul></ul>
  </div>
</form>

@section Scripts {
  @*
    NOTE: this is a terrible way to do client script.
    TODO: replace cshtml & viewcontrollers with redux/react spa.
  *@
  @* ReSharper disable FunctionsUsedBeforeDeclared *@
  <script>
    $(document).on('ready', function () {
      var formId = 'redeem_form', username = 'username';
      setFocus(formId, username);
      function receiveCheckUsernameResponse($button, usernameValue, response) {
        var successOrError = response.isAvailable ? 'success' : 'error';
        var successOrDanger = response.isAvailable ? 'success' : 'danger';
        $button.parents('.form-group').addClass('has-' + successOrError);
        $button.find('.glyphicon').hide();
        $button.find('.glyphicon.text-' + successOrDanger).show();
        var reason = response.reasonInvalid;
        var $checkUsernameMessage = $('#check_username_message');
        var validationMessage = getValidationMessage({
          key: username,
          reason: reason || 'success',
          value: usernameValue
        });
        $checkUsernameMessage.html(validationMessage);
        $button.parents('.form-group').find('.help-block').hide();
        $checkUsernameMessage.show();
      }
      $('#check_username').on('click', function () {
        var $button = $(this);
        var $form = $('#' + formId);
        var url = $button.data('click-action');
        var usernameValue = $form.find('[name=' + username + ']').val();
        disableForm($form);
        $button.parents('.form-group').removeClass('has-success').removeClass('has-error');
        $button.find('.glyphicon').hide();
        $button.find('.glyphicon.text-info').show();
        $button.parents('.form-group').find('.help-block').hide();
        $button.parents('.form-group').find('.help-info.checking-availability').show();
        $.ajax({
          type: 'POST',
          url: url,
          data: {
            username: usernameValue
          }
        })
          .done(function (response) {
            receiveCheckUsernameResponse($button, usernameValue, response);
          })
          .fail(function (xhr) {
            receiveCheckUsernameResponse($button, usernameValue, {
              reasonInvalid: 'status' + xhr.status
            });
          })
        .always(function () {
          enableForm($form);
          $form.find('[name=emailOrPhone]').attr('disabled', 'disabled');
        });
        return false;
      });

      $('#' + formId).on('submit', function () {
        var $form = $(this), data = serializeFormData($form);
        clearValidationErrors($form);
        disableForm($form);
        $.ajax({
          type: 'POST',
          url: $form.attr('action'),
          data: data
        })
          .done(function (response, status, xhr) {
            var socket = getCorrelationSocket(xhr);
            var isConstraintViolated = false;
            socket.onopen = function (e) {
              console.log('WebSockets: Correlation ' + e.type);
            }
            socket.onmessage = function (message) {
              console.log('WebSockets: ' + message.data);
              if (isConstraintViolated) return;
              var messageData = parseMessageData(message);
              if (messageData.isComplete) {
                setLocation(xhr);
                return;
              } else if (messageData.isComplete === false) {
                isConstraintViolated = true;
                var validationMessage;

                if (messageData.duplicateUsername) {
                  validationMessage = getValidationMessage({
                    key: 'username',
                    reason: 'alreadyExists',
                    value: messageData.duplicateUsername
                  });
                  addValidationError($form, validationMessage);
                }
                if (messageData.duplicateContact) {
                  validationMessage = getValidationMessage({
                    key: 'emailOrPhone',
                    reason: 'alreadyExists',
                    value: messageData.duplicateContact
                  });
                  addValidationError($form, validationMessage);
                }
                if (!messageData.duplicateUsername && !messageData.duplicateContact) {
                  validationMessage = getValidationMessage({
                    key: 'unknown',
                    reason: 'unknown'
                  });
                  addValidationError($form, validationMessage);
                }
                enableForm($form);
                $form.find('[name=emailOrPhone]').attr('disabled', 'disabled');
              }
            }
          })
          .fail(function (xhr) {
            enableForm($form);
            $form.find('[name=emailOrPhone]').attr('disabled', 'disabled');
            handleValidationErrors(xhr, $form);
          });
        return false;
      });

      window['validationMessages'] = {
        username: {
          empty: 'Username is required.',
          invalidFormat: 'Username can only contain letters, numbers, hyphens, underscores, dots, and must be between 2 and 12 characters long.',
          alreadyExists: 'Sorry, the username **{attemptedValue}** is already taken. Please choose a different username.',
          phoneNumber: 'You cannot use a phone number as your username.',
          success: 'You will also be able to login with the username above.'
        },
        password: {
          empty: 'Password is required.',
          notEqual: 'Passwords do not match.',
          invalidFormat: 'Password must contain at least {minCharacters} characters.'
        },
        passwordConfirmation: {
          empty: 'Password confirmation is required.'
        },
        token: {
          stateConflict: 'Your password has already been created. Please use the forward button on your browser and do not navigate back to this page.',
          unverified: 'Your opportunity to complete registration has expired. Please restart the registration process.'
        },
        correlationId: {
          'null': 'Something went wrong. Please restart the registration process.'
        },
        emailOrPhone: {
          alreadyExists: 'The login **{attemptedValue}** has already been registered. Did you forget your password?'
        }
      }
    });
  </script>
  @* ReSharper restore FunctionsUsedBeforeDeclared *@
}